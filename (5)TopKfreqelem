#use map for store integer and their frequency. Use min heap for storing top k most frequent element. TC=O(N*log(K))

1) Input :- [1,1,1,2,2,3], k=2   Output :- [1,2]

Function :-
vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int,int> mp;
        for(int i=0;i<nums.size();i++){
            mp[nums[i]]++;
        }
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        for(auto it=mp.begin();it!=mp.end();it++){
            pq.push({it->second,it->first});
            if(pq.size()>k){
                pq.pop();
            }
        }
        vector<int> v;
        while(!pq.empty()){
            v.push_back(pq.top().second);
            pq.pop();
        }
        return v;
}

2nd Approach :- Instead of using min heap use 2D array. TC=O(N)
Function :-
vector<int> topKFrequent(vector<int>& nums, int k) {
        int n = nums.size(); 
        unordered_map<int, int> mp;
        for (int i=0; i<n; i++) {
            mp[nums[i]]++;
        }        
        vector<vector<int>> v(n + 1);
        for (auto it=mp.begin(); it!=mp.end(); it++) {
            v[it->second].push_back(it->first);
        }       
        vector<int> result;        
        for (int i=n; i>=0; i--) {
            if (result.size() >= k) {
                break;
            }
            if (!v[i].empty()) {
                result.insert(result.end(), v[i].begin(), v[i].end());
            }
        }       
        return result;
}
